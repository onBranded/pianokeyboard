/*Author1: Colm Brandon 15183203 
  For the keyboard to output sound it is necessary to download soundcipher from the link below and add it to processing library.
  http://explodingart.com/soundcipher/download.html
  */
PShape pianokeyone,pianokeytwo,pianokeythree,pianokeyfour;
float Swidth;
float Sheight;
int  noWhitekeys,NoteNum, drawstart, inputkeys, Volume;
int octaves;
float TotalKeys;
float Xvalue,i,j,a,b,c,d,e,f,g,h;
PShape [] PianoKeys = new PShape[128];
float [] Xpos = new float [128];
 import arb.soundcipher.*;
 SoundCipher sc = new SoundCipher(this);
void setup()
{
  Volume = 50;
  inputkeys = 19;
  octaves = inputkeys/12;
  size(1000, 500);
  noWhitekeys = 7*octaves;
  whiteKeys();
  drawStart();
  TotalKeys = inputkeys;
  Sheight = height;
  Swidth = width;
  createShapes();
  drawpiano();
  drawInstructions();
  Buttons();
}
void draw(){
}
void drawpiano()
{
background(255);
shapeMode(CORNER);
Xvalue = 0;
for ( int i = 60 - drawstart; i < 61 + TotalKeys - drawstart; i++)
{
  if(i % 12 == 0 || i % 12 == 5)
  {
    shape(PianoKeys[i],Xvalue,Sheight/4);
      if(i ==60)
    {
      middleC();
    }
    Xpos [i] = Xvalue;
    Xvalue+= a;
    }
  else if(i % 12 == 2 || i% 12 == 7 || i % 12 ==9)
  {
    shape(PianoKeys[i],Xvalue,Sheight/4);
    Xpos [i] = Xvalue + f/2 ;
    Xvalue += a;
  }
  else if(i % 12 == 4 || i % 12 == 11)
  {
    shape(PianoKeys[i],Xvalue,Sheight/4);
    Xpos [i] = Xvalue + f/2;
    Xvalue += Swidth/noWhitekeys;
  }
  else
  {
    shape(PianoKeys[i],Xvalue,Sheight/4);
    Xpos [i] = Xvalue;
    Xvalue += f/2;
    
  }
}
}
void mousePressed(){
  int i;
  if((mouseY <= (Sheight/4 + Sheight/3)) && (mouseY > Sheight/4)){
    float mapx = 0;
  for (i = 60 - drawstart; i < 60 + TotalKeys - drawstart; i++)
  {
    if(mouseX >= Xpos[i] && mouseX< Xpos[i+1])
  {
  mapx = i;
  sc.playNote(mapx, Volume, 2.0);
  print(mouseX + " ");
  print(mapx + " ");
  break;
  }
  }
  }
  else if((mouseY <= (3*(Sheight/4))) && (mouseY > (Sheight/4 + Sheight/3)))
  {
  float mapx = 0;
  for (i = 60 - drawstart; i < 60 + TotalKeys - drawstart; i++)
  {
    if(mouseX >= Xpos[i] && mouseX< Xpos[i+1])
  {
    if( i % 12 == 1 || i % 12 == 3 || i % 12 == 6 || i % 12 == 8 || i % 12 == 10)
      {
        if(mouseX >= Xpos[i] && mouseX < Xpos[i] +(Xpos[i+1]-Xpos[i])/2)
        {
        mapx = i-1;
        sc.playNote(mapx, Volume, 2.0);
        print(mouseX + " ");
        print(mapx + " ");
        break;
        }
        else
        {
          mapx = i+1;
          sc.playNote(mapx, Volume, 2.0);
          print(mouseX + " ");
          print(mapx + " ");
          break;
        }
        
      }
    else
      {
        mapx = i;
        sc.playNote(mapx, Volume, 2.0);
        print(mouseX + " ");
        print(mapx + " ");
        break;
      }
  }
  }
    
  }

    if(mouseY > 20 && mouseY < 70 && mouseX > 50 && mouseX < 100 && Volume <= 100)
    {
      Volume +=5;
      adjustSize();
    }
    
    else if(mouseY > 20 && mouseY < 70 && mouseX > 105 && mouseX < 155 && Volume > 4)
    {
      Volume -=5;
      adjustSize();
    }
}
void middleC()
{
  String [] middleCletters = {"M","I","D","D","L","E","C"};
  for (int i = 0; i <middleCletters.length; i++)
    {
      if(i < middleCletters.length -1)
        {
        textAlign(CENTER);
        textSize(60/(octaves+1));
        fill(0);
        text(middleCletters[i], Xvalue + b/4, Sheight/4 + 25 + (i*30));
        }
      else
        {
        textAlign(CENTER);
        fill(0);
        textSize(60/octaves);
        text(middleCletters[i], Xvalue + b/4, Sheight/4 + 50 +  (i*30));
        }
    }
  
}

void whiteKeys(){
  if (inputkeys % 12 > 0){
     if (inputkeys % 12 == 1 ||inputkeys % 12 == 2 )
     {
       noWhitekeys+=1;
     }
     else if (inputkeys % 12 == 3 ||inputkeys % 12 == 4 )
     {
       noWhitekeys+=2;
     }
     else if (inputkeys % 12 == 5)
     {
       noWhitekeys+=3;
     }
     else if (inputkeys % 12 == 6 ||inputkeys % 12 == 7 )
     {
       noWhitekeys+=4;
     }
     else if (inputkeys % 12 == 8 ||inputkeys % 12 == 9 )
     {
       noWhitekeys+=5;
     }
     else if (inputkeys % 12 == 10 ||inputkeys % 12 == 11 )
     {
       noWhitekeys+=6;
     }
      }
   else
   {
     noWhitekeys = octaves*7;
   }
 }
 
 void drawStart(){
   if (octaves == 1)
   {
       drawstart = 12;
   }
   
   else if (octaves == 2)
   {
     if (inputkeys % 12 >= 0 && inputkeys % 12 < 7)
       drawstart = 12;
     else if (inputkeys % 12 >= 7 && inputkeys % 12 < 12)
     {
       drawstart = 19;
     }
     
   }
   else if (octaves == 3 || octaves == 4 )
   {
     if (inputkeys % 12 >= 7 && inputkeys % 12 < 12 && octaves == 4)
     {
       drawstart = 31;
     }
     else 
     {
       drawstart = 24;
     }
   }
   else if (octaves == 5 || octaves == 6)
   {
     if (inputkeys % 12 >= 7 && inputkeys % 12 < 12 && octaves == 6)
       drawstart = 43;
     else
     {
       drawstart = 36;
     }
   }
   else if (octaves == 7 || octaves == 8)
   {
     if (inputkeys % 12 >= 7 && inputkeys % 12 < 12 && octaves == 8)
     {
     drawstart = 55;
     }
     else 
     {
       drawstart = 48;
     }
   }
 }

void createShapes(){
  a = (3.0)*(Swidth/noWhitekeys)/(4);
  b = (Swidth/noWhitekeys);
  c = (2.0*Sheight)/6;
  d = Sheight/2;
  e = (Swidth/noWhitekeys)-a;
  f = Swidth/(2.0*noWhitekeys);
  g = Sheight/3;
  h = (Swidth/(2*noWhitekeys));
  background(255);
  pianokeyone = createShape();
  pianokeyone.beginShape();
  pianokeyone.vertex(0,0);
  pianokeyone.vertex(a,0);
  pianokeyone.vertex(a,c);
  pianokeyone.vertex(b,c);
  pianokeyone.vertex(b,d);
  pianokeyone.vertex(0,d);
  pianokeyone.vertex(0,0);
  pianokeyone.endShape(CLOSE);
  pianokeyone.setFill(255);
  pianokeyone.setStroke(0);
  
  pianokeytwo = createShape();
  pianokeytwo.beginShape();
  pianokeytwo.vertex(e,0);
  pianokeytwo.vertex(a,0);
  pianokeytwo.vertex(a,c);
  pianokeytwo.vertex(b,c);
  pianokeytwo.vertex(b,d);
  pianokeytwo.vertex(0,d);
  pianokeytwo.vertex(0,c);
  pianokeytwo.vertex(e,c);
  pianokeytwo.vertex(e,0);
  pianokeytwo.endShape(CLOSE);
  pianokeytwo.setFill(255);
  pianokeytwo.setStroke(0);
  
  pianokeythree = createShape();
  pianokeythree.beginShape();
  pianokeythree.vertex(e,0);
  pianokeythree.vertex(b,0);
  pianokeythree.vertex(b,d);
  pianokeythree.vertex(0,d);
  pianokeythree.vertex(0,c);
  pianokeythree.vertex(e,c);
  pianokeythree.vertex(e,0);
  pianokeythree.endShape(CLOSE);
  pianokeythree.setFill(255);
  pianokeythree.setStroke(0);
  
  pianokeyfour = createShape();
  pianokeyfour.beginShape();
  pianokeyfour.vertex(0,0);
  pianokeyfour.vertex(f,0);
  pianokeyfour.vertex(f,g);
  pianokeyfour.vertex(0,g);
  pianokeyfour.vertex(0,0);
  pianokeyfour.noStroke();
  pianokeyfour.endShape(CLOSE);
  pianokeyfour.setFill(0);
  
  
  for( int i = 0; i < PianoKeys.length; i++)
  {
    if(i % 12 == 0 || i % 12 ==5)
    {
      PianoKeys[i] = pianokeyone;
    }
    else if (i % 12 == 2 || i % 12 == 7 || i % 12 == 9)
    {
      PianoKeys[i] = pianokeytwo;
    }
    else if ( i % 12 == 4 || i % 12 == 11)
    {
      PianoKeys[i] = pianokeythree;
    }
    else
    {
      PianoKeys[i] = pianokeyfour;
    }
  }  
}

void keyPressed()
{
  if (key == CODED )
  {
    if (keyCode == UP && inputkeys <107)
    {
      inputkeys += 1;
      adjustSize();
    }
    else if (keyCode == DOWN && inputkeys >= 19)
    {
      inputkeys -= 1;
      adjustSize();
    }
    else if (keyCode == LEFT && inputkeys >= 30)
    {
      inputkeys -= 12;
      adjustSize();
    }
    else if (keyCode == RIGHT && inputkeys <= 94)
    {
      inputkeys+= 12;
      adjustSize();
    }
  }
}
void adjustSize()
{
  //essentially the exact same as the setup function. It just calls all the methods that are needed to make adjustments to the keyboard.
  octaves = inputkeys/12;
  TotalKeys = inputkeys;
  noWhitekeys = 7*octaves;
  whiteKeys();
  drawStart();
  Sheight = height;
  Swidth = width;
  createShapes();
  drawpiano();
  Buttons();
  drawInstructions();
  
}

void drawInstructions()
{
  fill(0);
  textSize(10);
  textAlign(LEFT);
  text("Press UP to increase keys by one", width - 300, 20); 
  text("Press DOWN to decrease keys by one", width - 300, 40);
  text("Press RIGHT to increase keys by one full octave", width - 300, 60);
  text("Press LEFT to decrease keys by one full octave", width - 300, 80);
  text("Total Numbers of Active Keys:" + inputkeys,width - 300, 100);
  text("Current Volume:" + Volume,width - 300, 120);
}
  
  void Buttons()
  {
    textSize(9);
    rectMode(CORNER);
    textAlign(LEFT);
    fill(255,0,0);
    text("+ Volume",50, 13);
    rect(50,20,50,50);
    fill(0,0,255);
    text("- Volume",105, 13);
    rect(105,20,50,50);
  }
